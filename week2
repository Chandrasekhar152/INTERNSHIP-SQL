CREATE PROCEDURE InsertOrderDetails
    @OrderID INT,
    @ProductID INT,
    @UnitPrice MONEY = NULL,
    @Quantity INT,
    @Discount FLOAT = NULL
AS
BEGIN
    DECLARE @ProductUnitPrice MONEY;
    DECLARE @CurrentStock INT;
    DECLARE @ReorderLevel INT;

    -- Get Product Price if UnitPrice is NULL
    IF @UnitPrice IS NULL
    BEGIN
        SELECT @ProductUnitPrice = UnitPrice
        FROM Products
        WHERE ProductID = @ProductID;
    END
    ELSE
    BEGIN
        SET @ProductUnitPrice = @UnitPrice;
    END

    -- Set Discount to 0 if NULL
    IF @Discount IS NULL
    BEGIN
        SET @Discount = 0;
    END

    -- Check Stock
    SELECT @CurrentStock = UnitsInStock,
           @ReorderLevel = ReorderLevel
    FROM Products
    WHERE ProductID = @ProductID;

    IF @CurrentStock < @Quantity
    BEGIN
        PRINT 'Not enough stock available.';
        RETURN;
    END

    -- Insert record
    INSERT INTO [Order Details] (OrderID, ProductID, UnitPrice, Quantity, Discount)
    VALUES (@OrderID, @ProductID, @ProductUnitPrice, @Quantity, @Discount);

    -- Check insertion
    IF @@ROWCOUNT = 0
    BEGIN
        PRINT 'Failed to place the order. Please try again.';
        RETURN;
    END

    -- Adjust Stock
    UPDATE Products
    SET UnitsInStock = UnitsInStock - @Quantity
    WHERE ProductID = @ProductID;

    -- Check ReorderLevel
    IF EXISTS (
        SELECT 1
        FROM Products
        WHERE ProductID = @ProductID AND UnitsInStock < ReorderLevel
    )
    BEGIN
        PRINT 'Stock level is below Reorder Level.';
    END
END;


CREATE PROCEDURE DeleteOrderDetails
    @OrderID INT,
    @ProductID INT
AS
BEGIN
    -- Validate parameters
    IF NOT EXISTS (
        SELECT 1
        FROM [Order Details]
        WHERE OrderID = @OrderID AND ProductID = @ProductID
    )
    BEGIN
        PRINT 'Invalid parameters: OrderID or ProductID does not exist.';
        RETURN -1;
    END

    -- Delete the record
    DELETE FROM [Order Details]
    WHERE OrderID = @OrderID AND ProductID = @ProductID;

    PRINT 'Order detail deleted successfully.';
END;


--Views

CREATE VIEW vwCustomerOrders AS
SELECT
    c.CompanyName,
    o.OrderID,
    o.OrderDate,
    od.ProductID,
    p.ProductName,
    od.Quantity,
    od.UnitPrice,
    (od.Quantity * od.UnitPrice) AS TotalPrice
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID;





--vwCustomerOrders 
CREATE VIEW vwCustomerOrdersYesterday AS
SELECT
    c.CompanyName,
    o.OrderID,
    o.OrderDate,
    od.ProductID,
    p.ProductName,
    od.Quantity,
    od.UnitPrice,
    (od.Quantity * od.UnitPrice) AS TotalPrice
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE CAST(o.OrderDate AS DATE) = CAST(GETDATE() - 1 AS DATE);



--MyProducts 
CREATE VIEW MyProducts AS
SELECT
    p.ProductID,
    p.ProductName,
    p.QuantityPerUnit,
    p.UnitPrice,
    s.CompanyName,
    c.CategoryName
FROM Products p
JOIN Suppliers s ON p.SupplierID = s.SupplierID
JOIN Categories c ON p.CategoryID = c.CategoryID
WHERE p.Discontinued = 0;

--triggers
CREATE TRIGGER trgInsteadOfDeleteOrder
ON Orders
INSTEAD OF DELETE
AS
BEGIN
    DELETE FROM [Order Details]
    WHERE OrderID IN (SELECT OrderID FROM deleted);

    DELETE FROM Orders
    WHERE OrderID IN (SELECT OrderID FROM deleted);
END;


CREATE TRIGGER trgCheckStockBeforeInsert
ON [Order Details]
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @ProductID INT, @Quantity INT, @Stock INT;

    SELECT @ProductID = ProductID, @Quantity = Quantity
    FROM inserted;

    SELECT @Stock = UnitsInStock
    FROM Products
    WHERE ProductID = @ProductID;

    IF @Stock >= @Quantity
    BEGIN
        -- Insert the order detail
        INSERT INTO [Order Details]
        SELECT *
        FROM inserted;

        -- Deduct stock
        UPDATE Products
        SET UnitsInStock = UnitsInStock - @Quantity
        WHERE ProductID = @ProductID;
    END
    ELSE
    BEGIN
        PRINT 'Order cannot be placed: insufficient stock.';
    END
END;




